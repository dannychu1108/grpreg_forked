X <- X[,j]
fit <- lm(y~X)
fsMSE[i] <- sum((betas[j] - coef(fit)[-1])^2) + sum((betas[-j])^2)
#generate data
X <- matrix(rnorm(n*p), n, p)
y <- rnorm(n, X%*%betas, 1)
#create fuction to simulate
sim <- function(n, p, betas){
#set up
N <- 100
rMSE <- rep(NA, N)
fsMSE <- rep(NA, N)
lMSE <- rep(NA, N)
for(i in 1:N){
#generate data
X <- matrix(rnorm(n*p), n, p)
y <- rnorm(n, X%*%betas, 1)
#fit ridge
cvfit <- cv.glmnet(X, y, alpha = 0)
rMSE[i] <- sum((betas - coef(cvfit, s = cvfit$lambda.min)[-1])^2)
#fit lasso
cvfit <- cv.glmnet(X, y)
lbetas <- coef(cvfit, s = cvfit$lambda.min)[-1]
lMSE[i] <- sum((betas - lbetas)^2)
#fit forward selection
j <- which(lbetas != 0)
if(length(j)>0){
X <- X[,j]
fit <- lm(y~X)
fsMSE[i] <- sum((betas[j] - coef(fit)[-1])^2) + sum((betas[-j])^2)
} else {
fsMSE[i] <- sum((betas)^2)
}
if(is.NA(fsMSE[i])){break}
}
#c(mean(rMSE), mean(lMSE), mean(fsMSE))
cbind(X,y)
}
set.seed(3101232)
n <- 50
p <- 100
betas <- c(rep(.25, 16), rep(-.25, 16), rep(0, p-32))
sim(n, p, betas)
#create fuction to simulate
sim <- function(n, p, betas){
#set up
N <- 100
rMSE <- rep(NA, N)
fsMSE <- rep(NA, N)
lMSE <- rep(NA, N)
for(i in 1:N){
#generate data
X <- matrix(rnorm(n*p), n, p)
y <- rnorm(n, X%*%betas, 1)
#fit ridge
cvfit <- cv.glmnet(X, y, alpha = 0)
rMSE[i] <- sum((betas - coef(cvfit, s = cvfit$lambda.min)[-1])^2)
#fit lasso
cvfit <- cv.glmnet(X, y)
lbetas <- coef(cvfit, s = cvfit$lambda.min)[-1]
lMSE[i] <- sum((betas - lbetas)^2)
#fit forward selection
j <- which(lbetas != 0)
if(length(j)>0){
X <- X[,j]
fit <- lm(y~X)
fsMSE[i] <- sum((betas[j] - coef(fit)[-1])^2) + sum((betas[-j])^2)
} else {
fsMSE[i] <- sum((betas)^2)
}
if(is.na(fsMSE[i])){break}
}
#c(mean(rMSE), mean(lMSE), mean(fsMSE))
cbind(X,y)
}
set.seed(3101232)
n <- 50
p <- 100
betas <- c(rep(.25, 16), rep(-.25, 16), rep(0, p-32))
sim(n, p, betas)
Xy <- sim(n, p, betas)
X <- Xy[,-51]
y <- Xy[,51]
fit <- lm(y~X)
sum((betas[j] - coef(fit)[-1])^2) + sum((betas[-j])^2)
#create fuction to simulate
sim <- function(n, p, betas){
#set up
N <- 100
rMSE <- rep(NA, N)
fsMSE <- rep(NA, N)
lMSE <- rep(NA, N)
for(i in 1:N){
#generate data
X <- matrix(rnorm(n*p), n, p)
y <- rnorm(n, X%*%betas, 1)
#fit ridge
cvfit <- cv.glmnet(X, y, alpha = 0)
rMSE[i] <- sum((betas - coef(cvfit, s = cvfit$lambda.min)[-1])^2)
#fit lasso
cvfit <- cv.glmnet(X, y)
lbetas <- coef(cvfit, s = cvfit$lambda.min)[-1]
lMSE[i] <- sum((betas - lbetas)^2)
#fit forward selection
j <- which(lbetas != 0)
if(length(j)>0){
fsX <- X[,j]
fit <- lm(y~fsX)
fsMSE[i] <- sum((betas[j] - coef(fit)[-1])^2) + sum((betas[-j])^2)
} else {
fsMSE[i] <- sum((betas)^2)
}
if(is.na(fsMSE[i])){break}
}
#c(mean(rMSE), mean(lMSE), mean(fsMSE))
cbind(X,y)
}
set.seed(3101232)
n <- 50
p <- 100
betas <- c(rep(.25, 16), rep(-.25, 16), rep(0, p-32))
Xy <- sim(n, p, betas)
X <- Xy[,-51]
y <- Xy[,51]
#fit lasso
cvfit <- cv.glmnet(X, y)
lbetas <- coef(cvfit, s = cvfit$lambda.min)[-1]
lMSE[i] <- sum((betas - lbetas)^2)
sum((betas - lbetas)^2)
#fit forward selection
j <- which(lbetas != 0)
rMSE <- rep(NA, N)
fsMSE <- rep(NA, N)
lMSE <- rep(NA, N)
#set up
N <- 100
rMSE <- rep(NA, N)
fsMSE <- rep(NA, N)
lMSE <- rep(NA, N)
#fit forward selection
j <- which(lbetas != 0)
if(length(j)>0){
fsX <- X[,j]
fit <- lm(y~fsX)
fsMSE[i] <- sum((betas[j] - coef(fit)[-1])^2) + sum((betas[-j])^2)
} else {
fsMSE[i] <- sum((betas)^2)
}
sum((betas)^2)
if(length(j)>0){
fsX <- X[,j]
fit <- lm(y~fsX)
fsMSE[i] <- sum((betas[j] - coef(fit)[-1])^2) + sum((betas[-j])^2)
} else {
fsMSE[i] <- sum((betas)^2)
print(2)
}
###### Question 2.9 ######
i <- 1
lMSE[i] <- sum((betas - lbetas)^2)
if(length(j)>0){
fsX <- X[,j]
fit <- lm(y~fsX)
fsMSE[i] <- sum((betas[j] - coef(fit)[-1])^2) + sum((betas[-j])^2)
} else {
fsMSE[i] <- sum((betas)^2)
print(2)
}
for(i in 1:N){
#generate data
X <- matrix(rnorm(n*p), n, p)
y <- rnorm(n, X%*%betas, 1)
#fit ridge
cvfit <- cv.glmnet(X, y, alpha = 0)
rMSE[i] <- sum((betas - coef(cvfit, s = cvfit$lambda.min)[-1])^2)
#fit lasso
cvfit <- cv.glmnet(X, y)
lbetas <- coef(cvfit, s = cvfit$lambda.min)[-1]
lMSE[i] <- sum((betas - lbetas)^2)
#fit forward selection
j <- which(lbetas != 0)
if(length(j)>0){
fsX <- X[,j]
fit <- lm(y~fsX)
fsMSE[i] <- sum((betas[j] - coef(fit)[-1])^2) + sum((betas[-j])^2)
} else {
fsMSE[i] <- sum((betas)^2)
}
if(is.na(fsMSE[i])){break}
}
mean(fsMSE)
for(i in 1:N){
#generate data
X <- matrix(rnorm(n*p), n, p)
y <- rnorm(n, X%*%betas, 1)
#fit ridge
cvfit <- cv.glmnet(X, y, alpha = 0)
rMSE[i] <- sum((betas - coef(cvfit, s = cvfit$lambda.min)[-1])^2)
#fit lasso
cvfit <- cv.glmnet(X, y)
lbetas <- coef(cvfit, s = cvfit$lambda.min)[-1]
lMSE[i] <- sum((betas - lbetas)^2)
#fit forward selection
j <- which(lbetas != 0)
fsbetas <- rep(0,p)
if(length(j)>0){
fsX <- X[,j]
fit <- lm(y~fsX)
coef <- coef(fit)[-1]
#fsMSE[i] <- sum((betas[j] - coef(fit)[-1])^2) + sum((betas[-j])^2)
}
fsbetas[j] <- coef
fsMSE[i] <- sum((betas - fsbetas)^2)
#if(is.na(fsMSE[i])){break}
}
for(i in 1:N){
#generate data
X <- matrix(rnorm(n*p), n, p)
y <- rnorm(n, X%*%betas, 1)
#fit ridge
cvfit <- cv.glmnet(X, y, alpha = 0)
rMSE[i] <- sum((betas - coef(cvfit, s = cvfit$lambda.min)[-1])^2)
#fit lasso
cvfit <- cv.glmnet(X, y)
lbetas <- coef(cvfit, s = cvfit$lambda.min)[-1]
lMSE[i] <- sum((betas - lbetas)^2)
#fit forward selection
j <- which(lbetas != 0)
fsbetas <- rep(0,p)
if(length(j)>0){
fsX <- X[,j]
fit <- lm(y~fsX)
fsbetas[j] <- coef(fit)[-1]
#fsMSE[i] <- sum((betas[j] - coef(fit)[-1])^2) + sum((betas[-j])^2)
}
fsMSE[i] <- sum((betas - fsbetas)^2)
#if(is.na(fsMSE[i])){break}
}
fsbetas
mean(fsMSE)
#create fuction to simulate
sim <- function(n, p, betas){
#set up
N <- 100
rMSE <- rep(NA, N)
fsMSE <- rep(NA, N)
lMSE <- rep(NA, N)
for(i in 1:N){
#generate data
X <- matrix(rnorm(n*p), n, p)
y <- rnorm(n, X%*%betas, 1)
#fit ridge
cvfit <- cv.glmnet(X, y, alpha = 0)
rMSE[i] <- sum((betas - coef(cvfit, s = cvfit$lambda.min)[-1])^2)
#fit lasso
cvfit <- cv.glmnet(X, y)
lbetas <- coef(cvfit, s = cvfit$lambda.min)[-1]
lMSE[i] <- sum((betas - lbetas)^2)
#fit forward selection
j <- which(lbetas != 0)
fsbetas <- rep(0,p)
if(length(j)>0){
fsX <- X[,j]
fit <- lm(y~fsX)
fsbetas[j] <- coef(fit)[-1]
}
fsMSE[i] <- sum((betas - fsbetas)^2)
if(is.na(fsMSE[i])){break}
}
#c(mean(rMSE), mean(lMSE), mean(fsMSE))
cbind(X,y)
}
#create fuction to simulate
sim <- function(n, p, betas){
#set up
N <- 100
rMSE <- rep(NA, N)
fsMSE <- rep(NA, N)
lMSE <- rep(NA, N)
for(i in 1:N){
#generate data
X <- matrix(rnorm(n*p), n, p)
y <- rnorm(n, X%*%betas, 1)
#fit ridge
cvfit <- cv.glmnet(X, y, alpha = 0)
rMSE[i] <- sum((betas - coef(cvfit, s = cvfit$lambda.min)[-1])^2)
#fit lasso
cvfit <- cv.glmnet(X, y)
lbetas <- coef(cvfit, s = cvfit$lambda.min)[-1]
lMSE[i] <- sum((betas - lbetas)^2)
#fit forward selection
j <- which(lbetas != 0)
fsbetas <- rep(0,p)
if(length(j)>0){
fsX <- X[,j]
fit <- lm(y~fsX)
fsbetas[j] <- coef(fit)[-1]
}
fsMSE[i] <- sum((betas - fsbetas)^2)
if(is.na(fsMSE[i])){break}
}
#c(mean(rMSE), mean(lMSE), mean(fsMSE))
cbind(X,y)
}
n <- 50
p <- 100
betas <- c(rep(.25, 16), rep(-.25, 16), rep(0, p-32))
Xy <- sim(n, p, betas)
X <- Xy[,-51]
y <- Xy[,51]
#fit lasso
cvfit <- cv.glmnet(X, y)
lbetas <- coef(cvfit, s = cvfit$lambda.min)[-1]
lMSE[i] <- sum((betas - lbetas)^2)
#set up
N <- 100
rMSE <- rep(NA, N)
fsMSE <- rep(NA, N)
lMSE <- rep(NA, N)
###### Question 2.9 ######
i <- 1
#fit lasso
cvfit <- cv.glmnet(X, y)
lbetas <- coef(cvfit, s = cvfit$lambda.min)[-1]
lMSE[i] <- sum((betas - lbetas)^2)
#fit forward selection
j <- which(lbetas != 0)
fsbetas <- rep(0,p)
if(length(j)>0){
fsX <- X[,j]
fit <- lm(y~fsX)
fsbetas[j] <- coef(fit)[-1]
}
fsbetas
fsMSE[i] <- sum((betas - fsbetas)^2)
n <- 50
p <- 100
betas <- c(rep(.25, 16), rep(-.25, 16), rep(0, p-32))
#set up
N <- 100
rMSE <- rep(NA, N)
fsMSE <- rep(NA, N)
lMSE <- rep(NA, N)
for(i in 1:N){
#generate data
X <- matrix(rnorm(n*p), n, p)
y <- rnorm(n, X%*%betas, 1)
#fit ridge
cvfit <- cv.glmnet(X, y, alpha = 0)
rMSE[i] <- sum((betas - coef(cvfit, s = cvfit$lambda.min)[-1])^2)
#fit lasso
cvfit <- cv.glmnet(X, y)
lbetas <- coef(cvfit, s = cvfit$lambda.min)[-1]
lMSE[i] <- sum((betas - lbetas)^2)
#fit forward selection
j <- which(lbetas != 0)
fsbetas <- rep(0,p)
if(length(j)>0){
fsX <- X[,j]
fit <- lm(y~fsX)
fsbetas[j] <- coef(fit)[-1]
}
fsMSE[i] <- sum((betas - fsbetas)^2)
if(is.na(fsMSE[i])){break}
}
mean(fsMSE)
for(i in 1:N){
#generate data
X <- matrix(rnorm(n*p), n, p)
y <- rnorm(n, X%*%betas, 1)
#fit ridge
cvfit <- cv.glmnet(X, y, alpha = 0)
rMSE[i] <- sum((betas - coef(cvfit, s = cvfit$lambda.min)[-1])^2)
#fit lasso
cvfit <- cv.glmnet(X, y)
lbetas <- coef(cvfit, s = cvfit$lambda.min)[-1]
lMSE[i] <- sum((betas - lbetas)^2)
#fit forward selection
j <- which(lbetas != 0)
fsbetas <- rep(0,p)
if(length(j)>0){
fsX <- X[,j]
fit <- lm(y~fsX)
fsbetas[j] <- coef(fit)[-1]
}
fsMSE[i] <- sum((betas - fsbetas)^2)
if(is.na(fsMSE[i])){break}
}
fsMSE
for(i in 1:N){
#generate data
X <- matrix(rnorm(n*p), n, p)
y <- rnorm(n, X%*%betas, 1)
#fit ridge
cvfit <- cv.glmnet(X, y, alpha = 0)
rMSE[i] <- sum((betas - coef(cvfit, s = cvfit$lambda.min)[-1])^2)
#fit lasso
cvfit <- cv.glmnet(X, y)
lbetas <- coef(cvfit, s = cvfit$lambda.min)[-1]
lMSE[i] <- sum((betas - lbetas)^2)
#fit forward selection
j <- which(lbetas != 0)
fsbetas <- rep(0,p)
if(length(j)>0){
fsX <- X[,j]
fit <- lm(y~fsX)
fsbetas[j] <- coef(fit)[-1]
}
fsMSE[i] <- sum((betas - fsbetas)^2)
if(is.na(fsMSE[i])){break}
}
fsMSE
mean(lMSE)
mean(rMSE)
mean(fsMSE)
i <- 88
is.na(fsMSE[i])
attnoy <- attitude[-1]
x <- grpmat(attnoy, df = 4)
devtools::load_all()
devtools::load_all()
devtools::load_all()
x <- grpmat(attnoy, df = 4)
class(x) <- c("group_mat", "Ilikebigbutts", "taser")
fit <- grpreg(x, attitude$rating, penalty="grLasso")
class(x)
devtools::load_all()
class(x) <- c("grouped_mat", "Ilikebigbutts", "taser")
fit <- grpreg(x, attitude$rating, penalty="grLasso")
plot.sp.grpreg(fit, "complaints", c(3,100), ylab = "Ratings", xlab = "Complaints",
type = "contrast", scatter = TRUE)
devtools::load_all()
plot.sp.grpreg(fit, "complaints", c(3,100), ylab = "Ratings", xlab = "Complaints",
type = "contrast", scatter = TRUE)
devtools::load_all()
plot.sp.grpreg(fit, "complaints", c(3,100), ylab = "Ratings", xlab = "Complaints",
type = "contrast", scatter = TRUE)
plot.sp.grpreg(fit, "complaints", c(3,100), ylab = "Ratings", xlab = "Complaints",
type = "contrast", scatter = TRUE)
plot.sp.grpreg(fit, "complaints", c(3,100), ylab = "Ratings", xlab = "Complaints",
type = "conditional", scatter = TRUE)
plot.sp.grpreg(fit, "complaints", c(3,100), ylab = "Ratings", xlab = "Complaints",
type = "conditional", scatter = TRUE)
devtools::load_all()
plot.sp.grpreg(fit, "complaints", c(3,100), ylab = "Ratings", xlab = "Complaints",
type = "conditional", scatter = TRUE)
plot.sp.grpreg(fit, "complaints", c(3,100), ylab = "Ratings", xlab = "Complaints",
type = "conditional", scatter = TRUE)
devtools::load_all()
plot.sp.grpreg(fit, "complaints", c(3,100), ylab = "Ratings", xlab = "Complaints",
type = "conditional", scatter = TRUE)
#reproduce bs object - will need to check if bs or ns
#check if x is grped mat
df <- length(fit$knots[[1]]+fit$degree)
variable <- "complaints"
lambda <- c(31,45)
j <- which(fit$group == variable)
i <- j[df]/df
l <- length(lambda)
mat <- fit$X[,j]
attr(mat, "degree") <- fit$degree
attr(mat, "knots") <- fit$knots[[i]]
attr(mat, "Boundary.knots") <- fit$boundary[[i]]
attr(mat, "intercept") <- FALSE
attr(mat, "class") <- c(fit$type, "basis", "matrix")
#create sequence and basis
min <- attr(mat, "Boundary.knots")[1]
max <- attr(mat, "Boundary.knots")[2]
newx <- seq(min, max, length.out = 200)
newxbs <- predict(mat, newx)
#newx <- matrix(newx, nrow = 200, ncol = l)
xmeans <- colMeans(fit$X)
fit$beta
devtools::load_all()
attnoy <- attitude[-1]
x <- grpmat(attnoy, df = 4)
fit <- grpreg(x, attitude$rating, penalty="grLasso")
object <- grpreg(x, attitude$rating, penalty="grLasso")
X <- colMeans(attnoy)
!missing(object$grpmat)
p <- length(unique(fit$groups))
attnoy <- attitude[-1]
x <- grpmat(attnoy, df = 4)
X <- colMeans(attnoy)
object <- grpreg(x, attitude$rating, penalty="grLasso")
object$groups
p <- length(unique(object$group))
grpmat <- object$grpmat
df <- length(grpmat$knots[[1]]+grpmat$degree)
grpmat$knots
grpmat$degree
df <- length(grpmat$knots[[1]]+grpmat$degree)
df <- grpmat$knots[[1]]+grpmat$degree
df <- length(grpmat$knots[[1]])+grpmat$degree
bsX <- matrix(NA, nrows(X), (p*df))
bsX <- matrix(NA, nrow(X), (p*df))
nrow(X)
X <- rep(colMeans(attnoy),4)
predict(object, X)
devtools::load_all()
attnoy <- attitude[-1]
x <- grpmat(attnoy, df = 4)
X <- rep(colMeans(attnoy),4)
object <- grpreg(x, attitude$rating, penalty="grLasso")
predict(object, X)
X <- colMeans(attnoy)
!do.call(missing, object$grpmat)
!do.call(missing, object$grpmat$degree)
p <- length(unique(object$group))
grpmat <- object$grpmat
df <- length(grpmat$knots[[1]])+grpmat$degree
bsX <- matrix(NA, nrow(X), (p*df))
